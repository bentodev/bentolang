/* Bento
 *
 * $Id: ParsedConditionalExpression.java,v 1.4 2005/06/30 04:20:55 sthippo Exp $
 *
 * Copyright (c) 2002-2005 by bentodev.org
 *
 * Use of this code in source or compiled form is subject to the
 * Bento Poetic License at http://www.bentodev.org/poetic-license.html
 */

package bento.parser;

import bento.lang.*;

/**
 * Based on code generated by jjtree.
 *
 * @author Michael St. Hippolyte
 * @version $Revision: 1.4 $
 */

public class ParsedConditionalExpression extends ConditionalStatement implements Initializable {
    public ParsedConditionalExpression(int id) {
        super();
    }

    /** Accept the visitor. **/
    public Object jjtAccept(BentoParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void init() {
        ValueSource condition = null;
        Block block = null;
        Block elseBlock = null;
        ConditionalStatement elseIf = null;

        int n = getNumChildren();
        BentoNode penult = getChild(n - 2);
        if (penult instanceof Block) {
            elseBlock = (Block) getChild(n - 1);
            n--;
        }
        for (int i = n - 1; i > 2; i -= 2) {
            block = (Block) getChild(i);
            condition = (ValueSource) getChild(i - 1);
            if (elseIf == null) {
                elseIf = new ConditionalStatement(condition, block, elseBlock);
            } else {
                elseIf = new ConditionalStatement(condition, block, elseIf);
            }
        }

        block = (Block) getChild(1);
        condition = (ValueSource) getChild(0);
        if (elseIf == null) {
            setIfElse(condition, block, elseBlock);
        } else {
            setIfElseIf(condition, block, elseIf);
        }
    }
}
